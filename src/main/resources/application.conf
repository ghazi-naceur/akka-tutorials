akka {
  loglevel = DEBUG
}

mySpecialConfig {
  akka {
    loglevel = INFO
  }
}

# timed assertions test config
specialTimedAssertionsConfig {
  akka.test.single-expect-default = 0.3s
}

# intercepting log messages for tests
interceptingLogMessages {
 akka {
   loggers = ["akka.testkit.TestEventListener"]
   test {
     filter-leeway = 5s
   }
 }
}

# routers demo
routersDemo {
  akka {
    actor.deployment {
      /poolMaster2 {
        router = round-robin-pool
        nr-of-instances = 5
      }

      /groupMaster2 {
        router = round-robin-group
        routees.paths = ["/user/slave__1","/user/slave__2","/user/slave__3","/user/slave__4","/user/slave__5"] # paths already exist
      }
    }
  }
}

# dispatchers

my-dispatcher {
  type = Dispatcher # PinnedDispatcher(binds each actor with a thread pool with 1 thread), CallingThreadDispatcher(all comm in the calling thread)
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 3
  }
  throughput = 30 # nb of msgs that a dispatcher can handle for 1 actor, until that thread moves to another actor
}

dispatcherDemo {
  akka.actor.deployment {
    /dispatcher2 {
      dispatcher = my-dispatcher
    }
  }
}

# mailboxes demo

mailboxesDemo {
  support-ticket-dispatcher {
    mailbox-type = "gn.akka.essentials.part4.infrastructure.Mailboxes$SupportTicketPriorityMailbox" # Fully qualified class name
  }

  control-mailbox {
    mailbox-type = "akka.dispatch.UnboundedControlAwareMailbox"
  }

  akka.actor.deployment {
    /alternativeControlAwareActor {
      mailbox = control-mailbox # the 'control-mailbox' defined above
    }
  }
}

# custom dispatcher
dedicated-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 5
  }
}

akka.jvm-exit-on-fatal-error = off

# persistence store
akka.persistence.journal.plugin = "akka.persistence.journal.leveldb"
akka.persistence.journal.leveldb.dir = "src/main/resources/leveldb/journal"
akka.actor.allow-java-serialization = on

akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
akka.persistence.snapshot-store.local.dir = "src/main/resources/snapshots"

# Stores Serialization
localStores {
  akka.persistence.journal.plugin = "akka.persistence.journal.leveldb"
  akka.persistence.journal.leveldb.dir = "src/main/resources/leveldb/journal"

  akka.persistence.journal.leveldb.compaction-intervals = {
    simple-persistent-actor = 1000 #"simple-persistent-actor" == same name as the 'persistenceId' method, compacting when reaching 1001 messages
    "*" = 5000 # for all other actors, starting compacting when reaching 5001 messages
  }

  akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
  akka.persistence.snapshot-store.local.dir = "src/main/resources/snapshots/localStores"
}

postgresDemo {
  akka.persistence.journal.plugin = "jdbc-journal"
  akka.persistence.snapshot-store.plugin = "jdbc-snapshot-store"

  akka-persistence-jdbc {
    shared-databases {
      slick {
        profile = "slick.jdbc.PostgresProfile$"
        db {
          numThreads = 10
          driver = "org.postgresql.Driver"
          url = "jdbc:postgresql://localhost:5432/akka_tuto_db"
          user = "admin" # docker
          password = "admin" # docker
        }
      }
    }
  }

  jdbc-journal { # using slick conf
    use-shared-db = "slick"
  }

  jdbc-snapshot-store { # using slick conf
    use-shared-db = "slick"
  }
}

cassandraDemo {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

  # the rest is with already default values:
  # https://github.com/akka/akka-persistence-cassandra/blob/master/core/src/main/resources/reference.conf
}

customSerializerDemo {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

  akka.actor {
    serializers {
      java = "akka.serialization.JavaSerializer"
      myserializer = "gn.akka.persistence.part2.stores_serialization.UserRegistrationSerializer"
    }

    serialization-bindings {
      "gn.akka.persistence.part2.stores_serialization.UserRegistered" = myserializer
      # for the rest, java serializer is used by default
    }
  }
}