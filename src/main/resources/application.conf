akka {
  loglevel = DEBUG
}

mySpecialConfig {
  akka {
    loglevel = INFO
  }
}

# timed assertions test config
specialTimedAssertionsConfig {
  akka.test.single-expect-default = 0.3s
}

# intercepting log messages for tests
interceptingLogMessages {
 akka {
   loggers = ["akka.testkit.TestEventListener"]
   test {
     filter-leeway = 5s
   }
 }
}

# routers demo
routersDemo {
  akka {
    actor.deployment {
      /poolMaster2 {
        router = round-robin-pool
        nr-of-instances = 5
      }

      /groupMaster2 {
        router = round-robin-group
        routees.paths = ["/user/slave__1","/user/slave__2","/user/slave__3","/user/slave__4","/user/slave__5"] # paths already exist
      }
    }
  }
}

# dispatchers

my-dispatcher {
  type = Dispatcher # PinnedDispatcher(binds each actor with a thread pool with 1 thread), CallingThreadDispatcher(all comm in the calling thread)
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 3
  }
  throughput = 30 # nb of msgs that a dispatcher can handle for 1 actor, until that thread moves to another actor
}

dispatcherDemo {
  akka.actor.deployment {
    /dispatcher2 {
      dispatcher = my-dispatcher
    }
  }
}

# mailboxes demo

mailboxesDemo {
  support-ticket-dispatcher {
    mailbox-type = "gn.akka.essentials.part4.infrastructure.Mailboxes$SupportTicketPriorityMailbox" # Fully qualified class name
  }

  control-mailbox {
    mailbox-type = "akka.dispatch.UnboundedControlAwareMailbox"
  }

  akka.actor.deployment {
    /alternativeControlAwareActor {
      mailbox = control-mailbox # the 'control-mailbox' defined above
    }
  }
}